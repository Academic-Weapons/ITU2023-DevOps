---
name: Continuous Development

on:
  push:
    # Run workflow every time something is pushed to the main branch
    branches:
      - dev
  # allow manual triggers for now too
# Remember to set the following secrets in your repository's settings:
# https://github.com/your_username/itu-minitwit-ci/settings/secrets/actions
# DOCKER_USERNAME
# DOCKER_PASSWORD
# SSH_USER
# SSH_KEY
# SSH_HOST

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    
      - name: Selenium Test
        run: |
           sudo python3 /root/ITU2023-DevOps/MiniTwit/tests/selenium_tests.py
             
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push minitwitimage
        uses: docker/build-push-action@v4
        with:
          context: ./MiniTwit
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwitimagedev:latest
        
 #     - name: Build and push mysqlimage
  #      uses: docker/build-push-action@v2
   #     with:
    #      context: .
     #     file: ./Dockerfile-mysql
      #    push: true
       #   tags: ${{ secrets.DOCKER_USERNAME }}/mysqlimage:latest
        #  cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/mysqlimage:mysqlbuildcache
         # cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/mysqlimage:mysqlbuildcache,mode=max

#      - name: Build and push flagtoolimage
 #       uses: docker/build-push-action@v2
  #      with:
   #       context: .
    #      file: ./Dockerfile-flagtool
     #     push: true
      #    tags: ${{ secrets.DOCKER_USERNAME }}/flagtoolimage:latest
       #   cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/flagtoolimage:flagtoolbuildcache
        #  cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/flagtoolimage:flagtoolbuildcache,mode=max

#      - name: Test minitwit
 #       run: |
  #        docker build -t $DOCKER_USERNAME/minitwittestimage -f Dockerfile-minitwit-tests .
   #       yes 2>/dev/null | docker-compose up -d
    #      docker run --rm --network=itu-minitwit-network $DOCKER_USERNAME/minitwittestimage
     #   env:
      #    DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

#      - name: Configure SSH
#        run: |
#          mkdir -p ~/.ssh/
#          echo "$SSH_KEY" > ~/.ssh/minitwit.key
#          chmod 600 ~/.ssh/minitwit.key
#        env:
#          SSH_KEY: ${{ secrets.SSH_KEY }}

      - name: DEVployment
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            docker pull magmose1/minitwitimagedev:latest
            docker stop minidev || true && docker rm minidev || true
            docker run -d -p 8082:8080 --name minidev magmose1/minitwitimagedev:latest
            docker ps
            
            
#      - name: Deploy to server
#        # Configure the ~./bash_profile and deploy.sh file on the Vagrantfile
#        run: |
#          ssh -i ~/.ssh/minitwit.key $SSH_USER@$SSH_HOST -o StrictHostKeyChecking=no 
#          whoami
#          docker ps -a
#          docker images
#          docker pull magmose1/minitwitimage:latest
#          docker ps
          # docker stop minitwit
          # docker rm minitwit
#          docker run -d -p 8082:8080 --name mini3 magmose1/minitwitimage:latest
#        env:
#          SSH_USER: ${{ secrets.SSH_USER }}
#          SSH_HOST: ${{ secrets.SSH_HOST }}
