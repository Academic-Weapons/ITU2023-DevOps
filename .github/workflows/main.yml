---
name: Continuous Deployment

on:
  push:
    # Run workflow every time something is pushed to the main branch
    branches:
      - main
      - master
  # allow manual triggers for now too
# Remember to set the following secrets in your repository's settings:
# https://github.com/your_username/itu-minitwit-ci/settings/secrets/actions
# DOCKER_USERNAME
# DOCKER_PASSWORD
# SSH_USER
# SSH_KEY
# SSH_HOST


jobs:
  sonarqube:
      name: SonarQube Trigger
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        - name: Set up JDK 11
          uses: actions/setup-java@v3
          with:
            java-version: 11
            distribution: 'zulu' # Alternative distribution options are available.
        - name: Cache SonarCloud packages
          uses: actions/cache@v3
          with:
            path: ~/.sonar/cache
            key: ${{ runner.os }}-sonar
            restore-keys: ${{ runner.os }}-sonar
        - name: Cache Maven packages
          uses: actions/cache@v3
          with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2
        - name: Analyze
          working-directory: ./MiniTwit
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONARQUBE_ORGANIZATION: ${{ secrets.SONARQUBE_ORGANIZATION }}
          run: mvn sonar:sonar -Dsonar.organization=$SONARQUBE_ORGANIZATION -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN -Dsonar.java.binaries=target/sonar -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push minitwitimage
        uses: docker/build-push-action@v4
        with:
          context: ./MiniTwit
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwitimage:latest

      - name: Deploy to Docker Swarm
        uses: appleboy/ssh-action@v0.1.8
        with:
          key: ${{ secrets.SSH_KEY_SWARM }}
          username: ${{ secrets.SSH_USER_SWARM }}
          host: ${{ secrets.SSH_HOST_SWARM }}
          args: |
              docker pull magmose1/minitwitimage:latest
              docker service rm backend || true
              docker service create -p 8080:8080 --name backend magmose1/minitwitimage:latest
              docker ps


      # - name: deployment
      #   uses: appleboy/ssh-action@v0.1.8
      #   with:
      #     host: ${{ secrets.SSH_HOST }}
      #     username: ${{ secrets.SSH_USER }}
      #     key: ${{ secrets.SSH_KEY }}
      #     script: |
      #       docker pull magmose1/minitwitimage:latest
      #       docker stop minitwit || true && docker rm minitwit || true
      #       docker run -d -p 8081:8080 --name minitwit magmose1/minitwitimage:latest
      #       docker ps

      
